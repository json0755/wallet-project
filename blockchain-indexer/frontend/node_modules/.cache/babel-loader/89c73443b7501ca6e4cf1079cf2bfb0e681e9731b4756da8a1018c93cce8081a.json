{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例，配置基础URL和请求拦截器\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '' : '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\napi.interceptors.request.use(config => {\n  // 在开发环境下，确保不使用系统代理\n  if (process.env.NODE_ENV === 'development') {\n    // 对于本地开发，使用React的代理配置\n    config.proxy = false;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  console.error('API请求错误:', error);\n\n  // 处理网络错误\n  if (error.code === 'ECONNABORTED') {\n    error.message = '请求超时，请检查网络连接';\n  } else if (error.code === 'ERR_NETWORK') {\n    error.message = '网络连接失败，请检查后端服务是否正常运行';\n  } else if (error.response) {\n    // 服务器响应了错误状态码\n    const {\n      status,\n      data\n    } = error.response;\n    switch (status) {\n      case 404:\n        error.message = '请求的资源不存在';\n        break;\n      case 500:\n        error.message = '服务器内部错误';\n        break;\n      default:\n        error.message = (data === null || data === void 0 ? void 0 : data.message) || `请求失败 (${status})`;\n    }\n  }\n  return Promise.reject(error);\n});\nexport default api;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","NODE_ENV","timeout","headers","interceptors","request","use","config","proxy","error","Promise","reject","response","console","code","message","status","data"],"sources":["/home/bape/openspace_code/denglian/wallet-project/blockchain-indexer/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\n// 创建axios实例，配置基础URL和请求拦截器\nconst api = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '' : '/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器\napi.interceptors.request.use(\n  (config) => {\n    // 在开发环境下，确保不使用系统代理\n    if (process.env.NODE_ENV === 'development') {\n      // 对于本地开发，使用React的代理配置\n      config.proxy = false;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器\napi.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    console.error('API请求错误:', error);\n    \n    // 处理网络错误\n    if (error.code === 'ECONNABORTED') {\n      error.message = '请求超时，请检查网络连接';\n    } else if (error.code === 'ERR_NETWORK') {\n      error.message = '网络连接失败，请检查后端服务是否正常运行';\n    } else if (error.response) {\n      // 服务器响应了错误状态码\n      const { status, data } = error.response;\n      switch (status) {\n        case 404:\n          error.message = '请求的资源不存在';\n          break;\n        case 500:\n          error.message = '服务器内部错误';\n          break;\n        default:\n          error.message = data?.message || `请求失败 (${status})`;\n      }\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EACvBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GAAG,EAAE,GAAG,MAAM;EAC7DC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,GAAG,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,IAAIR,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;IAC1C;IACAM,MAAM,CAACC,KAAK,GAAG,KAAK;EACtB;EACA,OAAOD,MAAM;AACf,CAAC,EACAE,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAb,GAAG,CAACQ,YAAY,CAACQ,QAAQ,CAACN,GAAG,CAC1BM,QAAQ,IAAK;EACZ,OAAOA,QAAQ;AACjB,CAAC,EACAH,KAAK,IAAK;EACTI,OAAO,CAACJ,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;;EAEhC;EACA,IAAIA,KAAK,CAACK,IAAI,KAAK,cAAc,EAAE;IACjCL,KAAK,CAACM,OAAO,GAAG,cAAc;EAChC,CAAC,MAAM,IAAIN,KAAK,CAACK,IAAI,KAAK,aAAa,EAAE;IACvCL,KAAK,CAACM,OAAO,GAAG,sBAAsB;EACxC,CAAC,MAAM,IAAIN,KAAK,CAACG,QAAQ,EAAE;IACzB;IACA,MAAM;MAAEI,MAAM;MAAEC;IAAK,CAAC,GAAGR,KAAK,CAACG,QAAQ;IACvC,QAAQI,MAAM;MACZ,KAAK,GAAG;QACNP,KAAK,CAACM,OAAO,GAAG,UAAU;QAC1B;MACF,KAAK,GAAG;QACNN,KAAK,CAACM,OAAO,GAAG,SAAS;QACzB;MACF;QACEN,KAAK,CAACM,OAAO,GAAG,CAAAE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEF,OAAO,KAAI,SAASC,MAAM,GAAG;IACvD;EACF;EAEA,OAAON,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeb,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}