{"ast":null,"code":"var _jsxFileName = \"/home/bape/openspace_code/denglian/wallet-project/blockchain-indexer/frontend/src/contexts/WalletContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ethers, BrowserProvider } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ANVIL_NETWORK = {\n  chainId: '0x7A69',\n  // 31337 in hex\n  chainName: 'Anvil Local Network',\n  nativeCurrency: {\n    name: 'Ethereum',\n    symbol: 'ETH',\n    decimals: 18\n  },\n  rpcUrls: ['http://localhost:8545'],\n  blockExplorerUrls: null\n};\nconst WalletContext = /*#__PURE__*/createContext();\nexport const useWallet = () => {\n  _s();\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n_s(useWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const WalletProvider = ({\n  children\n}) => {\n  _s2();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // 检查MetaMask是否安装\n  const isMetaMaskInstalled = () => {\n    return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n  };\n\n  // 连接钱包\n  const connectWallet = async () => {\n    if (!isMetaMaskInstalled()) {\n      toast.error('请安装MetaMask钱包');\n      return;\n    }\n    setIsConnecting(true);\n    try {\n      // 请求账户访问权限\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length > 0) {\n        const provider = new BrowserProvider(window.ethereum);\n        const signer = await provider.getSigner();\n        const network = await provider.getNetwork();\n        setProvider(provider);\n        setSigner(signer);\n        setAccount(accounts[0]);\n        setChainId(network.chainId);\n        setIsConnected(true);\n\n        // 检查是否连接到正确的网络\n        if (network.chainId !== 31337) {\n          toast.warning('请切换到Anvil本地网络 (Chain ID: 31337)');\n          await switchToAnvilNetwork();\n        } else {\n          toast.success('钱包连接成功！');\n        }\n      }\n    } catch (error) {\n      console.error('连接钱包失败:', error);\n      if (error.code === 4001) {\n        toast.error('用户拒绝连接钱包');\n      } else {\n        toast.error('连接钱包失败，请重试');\n      }\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // 断开钱包连接\n  const disconnectWallet = () => {\n    setAccount(null);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n    setIsConnected(false);\n    toast.info('钱包已断开连接');\n  };\n\n  // 切换到Anvil网络\n  const switchToAnvilNetwork = async () => {\n    if (!isMetaMaskInstalled()) {\n      toast.error('请安装MetaMask钱包');\n      return;\n    }\n    try {\n      // 尝试切换到Anvil网络\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: ANVIL_NETWORK.chainId\n        }]\n      });\n      toast.success('已切换到Anvil本地网络');\n    } catch (switchError) {\n      // 如果网络不存在，则添加网络\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [ANVIL_NETWORK]\n          });\n          toast.success('Anvil网络添加成功');\n        } catch (addError) {\n          console.error('添加网络失败:', addError);\n          toast.error('添加Anvil网络失败');\n        }\n      } else {\n        console.error('切换网络失败:', switchError);\n        toast.error('切换网络失败');\n      }\n    }\n  };\n\n  // 签名消息\n  const signMessage = async message => {\n    if (!signer) {\n      toast.error('请先连接钱包');\n      return null;\n    }\n    try {\n      const signature = await signer.signMessage(message);\n      toast.success('消息签名成功');\n      return signature;\n    } catch (error) {\n      console.error('签名失败:', error);\n      if (error.code === 4001) {\n        toast.error('用户拒绝签名');\n      } else {\n        toast.error('签名失败，请重试');\n      }\n      return null;\n    }\n  };\n\n  // 监听账户变化\n  useEffect(() => {\n    if (!isMetaMaskInstalled()) return;\n    const handleAccountsChanged = accounts => {\n      if (accounts.length === 0) {\n        disconnectWallet();\n      } else if (accounts[0] !== account) {\n        setAccount(accounts[0]);\n        toast.info('账户已切换');\n      }\n    };\n    const handleChainChanged = chainId => {\n      const newChainId = parseInt(chainId, 16);\n      setChainId(newChainId);\n      if (newChainId !== 31337) {\n        toast.warning('请切换到Anvil本地网络 (Chain ID: 31337)');\n      } else {\n        toast.success('已连接到Anvil本地网络');\n      }\n    };\n    const handleDisconnect = () => {\n      disconnectWallet();\n    };\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n    window.ethereum.on('disconnect', handleDisconnect);\n    return () => {\n      if (window.ethereum.removeListener) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n        window.ethereum.removeListener('disconnect', handleDisconnect);\n      }\n    };\n  }, [account]);\n\n  // 检查是否已连接\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (!isMetaMaskInstalled()) return;\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts'\n        });\n        if (accounts.length > 0) {\n          const provider = new BrowserProvider(window.ethereum);\n          const signer = await provider.getSigner();\n          const network = await provider.getNetwork();\n          setProvider(provider);\n          setSigner(signer);\n          setAccount(accounts[0]);\n          setChainId(network.chainId);\n          setIsConnected(true);\n        }\n      } catch (error) {\n        console.error('检查连接状态失败:', error);\n      }\n    };\n    checkConnection();\n  }, []);\n  const value = {\n    account,\n    provider,\n    signer,\n    chainId,\n    isConnecting,\n    isConnected,\n    isMetaMaskInstalled,\n    connectWallet,\n    disconnectWallet,\n    switchToAnvilNetwork,\n    signMessage,\n    isAnvilNetwork: chainId === 31337\n  };\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n};\n_s2(WalletProvider, \"mwT+67TEYromXiz0KgRFG91Xw4M=\");\n_c = WalletProvider;\nexport default WalletContext;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ethers","BrowserProvider","jsxDEV","_jsxDEV","ANVIL_NETWORK","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","WalletContext","useWallet","_s","context","Error","WalletProvider","children","_s2","account","setAccount","provider","setProvider","signer","setSigner","setChainId","isConnecting","setIsConnecting","isConnected","setIsConnected","isMetaMaskInstalled","window","ethereum","connectWallet","toast","error","accounts","request","method","length","getSigner","network","getNetwork","warning","switchToAnvilNetwork","success","console","code","disconnectWallet","info","params","switchError","addError","signMessage","message","signature","handleAccountsChanged","handleChainChanged","newChainId","parseInt","handleDisconnect","on","removeListener","checkConnection","value","isAnvilNetwork","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bape/openspace_code/denglian/wallet-project/blockchain-indexer/frontend/src/contexts/WalletContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { ethers, BrowserProvider } from 'ethers';\n\nconst ANVIL_NETWORK = {\n  chainId: '0x7A69', // 31337 in hex\n  chainName: 'Anvil Local Network',\n  nativeCurrency: {\n    name: 'Ethereum',\n    symbol: 'ETH',\n    decimals: 18,\n  },\n  rpcUrls: ['http://localhost:8545'],\n  blockExplorerUrls: null,\n};\n\nconst WalletContext = createContext();\n\nexport const useWallet = () => {\n  const context = useContext(WalletContext);\n  if (!context) {\n    throw new Error('useWallet must be used within a WalletProvider');\n  }\n  return context;\n};\n\nexport const WalletProvider = ({ children }) => {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n\n  // 检查MetaMask是否安装\n  const isMetaMaskInstalled = () => {\n    return typeof window !== 'undefined' && typeof window.ethereum !== 'undefined';\n  };\n\n  // 连接钱包\n  const connectWallet = async () => {\n    if (!isMetaMaskInstalled()) {\n      toast.error('请安装MetaMask钱包');\n      return;\n    }\n\n    setIsConnecting(true);\n    try {\n      // 请求账户访问权限\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      if (accounts.length > 0) {\n            const provider = new BrowserProvider(window.ethereum);\n            const signer = await provider.getSigner();\n            const network = await provider.getNetwork();\n\n        setProvider(provider);\n            setSigner(signer);\n        setAccount(accounts[0]);\n        setChainId(network.chainId);\n        setIsConnected(true);\n\n        // 检查是否连接到正确的网络\n        if (network.chainId !== 31337) {\n          toast.warning('请切换到Anvil本地网络 (Chain ID: 31337)');\n          await switchToAnvilNetwork();\n        } else {\n          toast.success('钱包连接成功！');\n        }\n      }\n    } catch (error) {\n      console.error('连接钱包失败:', error);\n      if (error.code === 4001) {\n        toast.error('用户拒绝连接钱包');\n      } else {\n        toast.error('连接钱包失败，请重试');\n      }\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // 断开钱包连接\n  const disconnectWallet = () => {\n    setAccount(null);\n    setProvider(null);\n    setSigner(null);\n    setChainId(null);\n    setIsConnected(false);\n    toast.info('钱包已断开连接');\n  };\n\n  // 切换到Anvil网络\n  const switchToAnvilNetwork = async () => {\n    if (!isMetaMaskInstalled()) {\n      toast.error('请安装MetaMask钱包');\n      return;\n    }\n\n    try {\n      // 尝试切换到Anvil网络\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: ANVIL_NETWORK.chainId }],\n      });\n      toast.success('已切换到Anvil本地网络');\n    } catch (switchError) {\n      // 如果网络不存在，则添加网络\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [ANVIL_NETWORK],\n          });\n          toast.success('Anvil网络添加成功');\n        } catch (addError) {\n          console.error('添加网络失败:', addError);\n          toast.error('添加Anvil网络失败');\n        }\n      } else {\n        console.error('切换网络失败:', switchError);\n        toast.error('切换网络失败');\n      }\n    }\n  };\n\n  // 签名消息\n  const signMessage = async (message) => {\n    if (!signer) {\n      toast.error('请先连接钱包');\n      return null;\n    }\n\n    try {\n      const signature = await signer.signMessage(message);\n      toast.success('消息签名成功');\n      return signature;\n    } catch (error) {\n      console.error('签名失败:', error);\n      if (error.code === 4001) {\n        toast.error('用户拒绝签名');\n      } else {\n        toast.error('签名失败，请重试');\n      }\n      return null;\n    }\n  };\n\n  // 监听账户变化\n  useEffect(() => {\n    if (!isMetaMaskInstalled()) return;\n\n    const handleAccountsChanged = (accounts) => {\n      if (accounts.length === 0) {\n        disconnectWallet();\n      } else if (accounts[0] !== account) {\n        setAccount(accounts[0]);\n        toast.info('账户已切换');\n      }\n    };\n\n    const handleChainChanged = (chainId) => {\n      const newChainId = parseInt(chainId, 16);\n      setChainId(newChainId);\n      \n      if (newChainId !== 31337) {\n        toast.warning('请切换到Anvil本地网络 (Chain ID: 31337)');\n      } else {\n        toast.success('已连接到Anvil本地网络');\n      }\n    };\n\n    const handleDisconnect = () => {\n      disconnectWallet();\n    };\n\n    window.ethereum.on('accountsChanged', handleAccountsChanged);\n    window.ethereum.on('chainChanged', handleChainChanged);\n    window.ethereum.on('disconnect', handleDisconnect);\n\n    return () => {\n      if (window.ethereum.removeListener) {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n        window.ethereum.removeListener('disconnect', handleDisconnect);\n      }\n    };\n  }, [account]);\n\n  // 检查是否已连接\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (!isMetaMaskInstalled()) return;\n\n      try {\n        const accounts = await window.ethereum.request({\n          method: 'eth_accounts',\n        });\n\n        if (accounts.length > 0) {\n          const provider = new BrowserProvider(window.ethereum);\n          const signer = await provider.getSigner();\n          const network = await provider.getNetwork();\n\n          setProvider(provider);\n          setSigner(signer);\n          setAccount(accounts[0]);\n          setChainId(network.chainId);\n          setIsConnected(true);\n        }\n      } catch (error) {\n        console.error('检查连接状态失败:', error);\n      }\n    };\n\n    checkConnection();\n  }, []);\n\n  const value = {\n    account,\n    provider,\n    signer,\n    chainId,\n    isConnecting,\n    isConnected,\n    isMetaMaskInstalled,\n    connectWallet,\n    disconnectWallet,\n    switchToAnvilNetwork,\n    signMessage,\n    isAnvilNetwork: chainId === 31337,\n  };\n\n  return (\n    <WalletContext.Provider value={value}>\n      {children}\n    </WalletContext.Provider>\n  );\n};\n\nexport default WalletContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}